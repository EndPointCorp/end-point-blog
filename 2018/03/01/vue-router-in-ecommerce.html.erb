---
author: Steph Skardal
title: "Using Vue Router in an Ecommerce App"
tags: ecommerce, vue, javascript, open-source
---

<img src="/blog/2018/02/19/vue-shop.png" alt="Vue Shop created by Matheus Azzi" /><br />

I recently wrote about [Vue in Ecommerce](http://www.endpoint.com/blog) and pointed to a handful of references to get started. Today, I'll talk about using [vue-router](https://router.vuejs.org/en/) in a small Ecommerce application, combined with [Vue-persistence]() for state storage.
 
I forked this [Vue Shop on GitHub](https://github.com/matheusazzi/shop-vue) from Matheus Azzi. It was a great starting point for a small shop in terms of basic component organization, and use of vuex, but it only is a single page ecommerce app with no separate page for a product detail, checkout, or any static pages.

### Vue Router

In looking through the documentation, I see that Vue Router doesn't have a great definition on what it is. If you are new to routing, it's a basic tool in mapping a given URL to the code / content that you want to serve. Since I'm coming from the Rails perspective, I'm quite familiar with the Ruby on Rails routing from URL pattern matching, constraints, resources to Ruby on Rails controllers and actions. Vue routing will map incoming URLs to components instead. 

When you create a basic Vue application via vue-cli, you are given the option to include vue-router:

```
vue init webpack myapp

? Project name myapp
? Project description A Vue.js project
? Author Steph <steph@endpoint.com>
? Vue build standalone
? Install vue-router? (Y/n) 
```

If you select Yes here, the main differences you'll see is that an application with vue-router installed will call <router-view/> to render the view for the current router, instead of a <HelloWorld/> component, and that a vue-router installed app will have src/router/index.js, which includes all of your routing to component configuration. 

#### Without Routing
```
// App.vue without vue-router
<template>
  <div id="app">
    <img src="./assets/logo.png">
    <HelloWorld/>
  </div>
</template>

<script>
import HelloWorld from './components/HelloWorld'

export default {
  name: 'App',
  components: {
    HelloWorld
  }
}
</script>

```

#### With Routing

```
// App.vue with vue-router
<template>
  <div id="app">
    <img src="./assets/logo.png">
    <router-view/>
  </div>
</template>

<script>
export default {
  name: 'App'
}
</script>
```

```
// src/router/index.js
import Vue from 'vue'
import Router from 'vue-router'
import HelloWorld from '@/components/HelloWorld'

Vue.use(Router)

export default new Router({
  routes: [
    {
      path: '/',
      name: 'HelloWorld',
      component: HelloWorld
    }
  ]
})
```

Moving on, building out an ecommerce app with some basic page set up, not including user accounts, might look like the code below, which includes basic components and routes for the Home, Cart, Checkout, Receipt, and About page. This simplified routing set-up doesn't even include a product detail page, but one could accomplish that with a bit of URL matching via parameters.

```
// src/router/index.js
import Vue from 'vue'
import Router from 'vue-router'

import Home from '@/components/pages/Home'
import Receipt from '@/components/pages/Receipt'
import About from '@/components/pages/About'
import Cart from '@/components/pages/Cart'
import Checkout from '@/components/pages/Checkout'

Vue.use(Router)

export default new Router({
  mode: 'history',
  routes: [
    { path: '/', component: Home },
    { path: '/receipt', component: Receipt },
    { path: '/about', component: About },
    { path: '/cart', component: Cart },
    { path: '/checkout', component: Checkout }
  ]
})
```

#### History Mode

One thing you also might notice is the Router mode of 'history' above, overriding the default hash mode. You can read about that [here](https://router.vuejs.org/en/essentials/history-mode.html), but it leverages history.pushState to URL navigation. The history mode override must be combined with server configuration to ensure that non-static asset URL requests (i.e. all of our routes) hits index.html in our Vue application, and then renders the component associated with the route. I'm using Apache for my Vue application, so I followed the instructions on that documentation for vue-router history mode configuration.

#### Using <router-link/>

One thing you also will want to use throughout your templates is <router-link/>, instead of hard-coding rigid URL paths for links. For example, instead of linking to the cart via <a href="/cart">Cart</a>, you'll want to link via <router-link to="cart">Cart</router-link>. This will be resolve to the proper link upon rendering depending on your configuration. 


### Vuex PersistedState 

If you are still reading, you now have the basics of Vue Router for a basic ecommerce application running on Vue. The Ecommerce application I forked already included use of [vuex](https://vuex.vuejs.org/en/intro.html), a state management pattern and library to store the state of our application. What you'll notice with a shopping cart application, though, is that you need to persist the state of your cart on a multi-routed application, both through page refreshes, and upon a user visiting your site in the same browser session. Without further configuration, every page refresh on your application will result in losing the state of the cart.

To address this challenge, there are a few options to persist your state in Vue, and I went with [vuex-persist](https://www.npmjs.com/package/vuex-persist), which stores the state (for all modules or specific modules) in localStorage, or other stores. After installing vuex-persist, I modified the following to include the shoppingCart module in my stored state:


```
// src/store/index.js
import Vue from 'vue'
import Vuex from 'vuex'
import VuexPersistence from 'vuex-persist'
// import stuff

Vue.use(Vuex)
const vuexLocal = new VuexPersistence({
  storage: window.localStorage,
  reducer: state => ({
    shoppingCart: state.shoppingCart
  })
})

export default new Vuex.Store({
  // ...
  plugins: [vuexLocal.plugin]
})
```

It's as simple as that to persist the state of 
